import React from "react";
import { Layout } from "../../../templates/layout";

export const ProgramOrData = () => (
	<Layout>
		<header>
			<h1>Программа и/или данные</h1>
		</header>

		<section>
			<p>
				Возможно, стоит уйти от дифференциации программ и данных. Первые являются вторыми.
				Хороший пример этому демонстрирует язык LISP и его диалекты, но и любой другой язык
				в конечном итоге становится AST-деревом в памяти, узлы которого являются
				абстракциями. То есть, мы говорим о реализации <a href="TODO:">DIP-принципа</a>.
			</p>

			<p>
				Интересно взглянуть на то, как эволюционируют языковые конструкции. Привычные циклы
				и условия теряют преимущества в сравнении с потоковыми нотациями вроде LINQ. Цикл
				"for", например, очень плохо реагирует на рост требований (партиционирование,
				многопоточность и т.п.), поэтому более правильная абстракция данных (например,
				диапазон или множество для обработки) выглядела бы более выгодно.
			</p>

			<p>
				Данные как программа. Они могли бы слиться воедино. Представим себе, что в любом
				поле ввода, которое предполагает ввод числа можно было бы ввести формулу его
				вычисления.
			</p>
		</section>
	</Layout>
);

export default ProgramOrData;
